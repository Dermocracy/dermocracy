const TelegramBot = require('node-telegram-bot-api');
const config = require('./config');
const translations = require('./lang');

const bot = new TelegramBot(config.TELEGRAM_BOT_TOKEN, { polling: true });

function getTranslation(lang, key) {
  return translations[lang] && translations[lang][key] ? translations[lang][key] : key;
}

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
  bot.sendMessage(
    chatId,
    '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language',
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üá¨üáß English', callback_data: 'en' },
            { text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data: 'ru' }
          ]
        ]
      }
    }
  );
});

bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;
  const lang = query.data;

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
  if (translations[lang]) {
    bot.sendMessage(chatId, getTranslation(lang, 'greetings'));
  } else {
    bot.sendMessage(chatId, '–Ø–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  bot.answerCallbackQuery(query.id);
});

bot.onText(/\/menu/, (msg, match) => {
  const chatId = msg.chat.id;

  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const lang = 'en';

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –æ–ø—Ü–∏—è–º–∏
  bot.sendMessage(
    chatId,
    getTranslation(lang, 'mainMenu'),
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: getTranslation(lang, 'option1'), callback_data: 'option1' }],
          [{ text: getTranslation(lang, 'option2'), callback_data: 'option2' }],
          [{ text: getTranslation(lang, 'option3'), callback_data: 'option3' }],
        ],
      },
    },
  );
});

console.log('Dermocracy Bot –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...');
``
// ... –∏–º–ø–æ—Ä—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π ...

bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;
  const lang = 'en'; // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const option = query.data;

  switch (option) {
    case 'en':
    case 'ru':
      bot.sendMessage(chatId, getTranslation(lang, 'greetings'));
      break;

    case 'option1':
      bot.sendMessage(chatId, getTranslation(lang, 'questionsList'));
      break;

    case 'option2':
      bot.sendMessage(chatId, getTranslation(lang, 'submitQuestion'));
      break;

    case 'option3':
      bot.sendMessage(chatId, getTranslation(lang, 'statistics'));
      break;

    default:
      bot.sendMessage(chatId, getTranslation(lang, 'unknownOption'));
      break;
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  bot.answerCallbackQuery(query.id);
});

// ... –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...

// ... –∏–º–ø–æ—Ä—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π ...

function voteOnQuestion(chatId, lang, questionId) {
  // –ó–¥–µ—Å—å –º—ã –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ questionId,
  // –Ω–æ —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
  const questionText = getTranslation(lang, 'sampleQuestion1');
  const inlineKeyboard = {
    inline_keyboard: [
      [
        { text: getTranslation(lang, 'yes'), callback_data: `vote_yes_${questionId}` },
        { text: getTranslation(lang, 'no'), callback_data: `vote_no_${questionId}` },
      ],
    ],
  };

  bot.sendMessage(chatId, `${getTranslation(lang, 'voteQuestion')} "${questionText}"`, {
    reply_markup: inlineKeyboard,
  });
}

function showVotingResults(chatId, lang, questionId) {
  // –ó–¥–µ—Å—å –º—ã –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ questionId,
  // –Ω–æ —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
  const yesVotes = 10;
  const noVotes = 5;

  bot.sendMessage(
    chatId,
    `${getTranslation(lang, 'votingResults')}\n${getTranslation(lang, 'yes')}: ${yesVotes}\n${getTranslation(lang, 'no')}: ${noVotes}`
  );
}

bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;
  const lang = 'en'; // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [action, option, questionId] = query.data.split('_');

  if (action === 'vote') {
    showVotingResults(chatId, lang, questionId);
  } else {
    // ... –¥—Ä—É–≥–∏–µ –æ–ø—Ü–∏–∏ ...

    if (option === 'option1') {
      showQuestions(chatId, lang);
    } else if (option === 'option2') {
      submitQuestion(chatId, lang);
    } else if (option.startsWith('vote')) {
      voteOnQuestion(chatId, lang, questionId);
    }

    // ... –¥—Ä—É–≥–∏–µ –æ–ø—Ü–∏–∏ ...
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  bot.answerCallbackQuery(query.id);
});

// ... –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...
// ... –∏–º–ø–æ—Ä—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π ...

function showStats(chatId, lang) {
  // –ó–¥–µ—Å—å –º—ã –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö,
  // –Ω–æ —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
  const stats = {
    totalChats: 100,
    totalUsers: 500,
    totalVotes: 1000,
  };

  const statsText = getTranslation(lang, 'statsText')
    .replace('{totalChats}', stats.totalChats)
    .replace('{totalUsers}', stats.totalUsers)
    .replace('{totalVotes}', stats.totalVotes);

  bot.sendMessage(chatId, statsText);
}

bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;
  const lang = 'en'; // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [action, option, questionId] = query.data.split('_');

  if (action === 'vote') {
    showVotingResults(chatId, lang, questionId);
  } else {
    // ... –¥—Ä—É–≥–∏–µ –æ–ø—Ü–∏–∏ ...

    if (option === 'option1') {
      showQuestions(chatId, lang);
    } else if (option === 'option2') {
      submitQuestion(chatId, lang);
    } else if (option.startsWith('vote')) {
      voteOnQuestion(chatId, lang, questionId);
    } else if (option === 'option3') {
      showStats(chatId, lang);
    }

    // ... –¥—Ä—É–≥–∏–µ –æ–ø—Ü–∏–∏ ...
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  bot.answerCallbackQuery(query.id);
});

// ... –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...

